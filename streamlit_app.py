# -*- coding: utf-8 -*-
"""HealthCheckAnalysis.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1dS0tFo5bRktzILuvAyCEd_tKAWiaz6w-
"""

#@title Init
import streamlit as st
from datetime import date
import cv2
import csv
from matplotlib import pyplot as plt
import numpy as np
import os
import statistics
import math
import seaborn as sns
import glob
from PIL import Image
from subprocess import check_output
import matplotlib.patches as mpatches
import statistics
from functools import lru_cache as cache
from numpy import inf
import warnings
warnings.filterwarnings('ignore')
st.set_page_config(layout="wide")
st.title('Health Check Analysis')

#global figure size
fig_size = (10,10)

csv_path = "AnalysisData.csv"

if not csv_path:
  print("\n\n########################################################\n\n")
  print("\n\n##############  BAD PATH  ##############\n\n")
  print("\n\n########################################################\n\n")

#@title Graph Title LookUp
def lookup(x):
  return {
      1: 'Voltage',
      2: 'UV',
      3: 'B1',
      4: 'B2',
      5: 'B3',
      6: 'B4',
      7: 'P5',
      8: 'E1',
      9: 'E2',
      10: 'E4' 
  }.get(x, 'Default')

#@title Parse and Sort
super_list = []
with open(csv_path,'r') as csv_file: 
  csv_reader = csv.DictReader(csv_file)
  line_count = 0
  for row in csv_reader:
      if line_count == 0:
          print(f'Column names are {", ".join(row)}')
          line_count += 1
      if row["Instrument ID"] == "":
        continue
      result = list(filter(lambda x: x[0] == row["Instrument ID"], super_list))
      if not result:
        temp_tuple = (row["Instrument ID"], [], [], [], [], [], [], [], [], [], [])
        super_list.append(temp_tuple)
      target = next(mbt for mbt in super_list if mbt[0] == row["Instrument ID"])
      target[1].append((float(row["Voltage"]), row["Date"]))
      target[2].append((float(row["UV"]), row["Date"]))
      target[3].append((float(row["B1 (psi)"]), row["Date"]))
      target[4].append((float(row["B2 (psi)"]), row["Date"]))
      target[5].append((float(row["B3 (psi)"]), row["Date"]))
      target[6].append((float(row["B4 (psi)"]), row["Date"]))
      target[7].append((float(row["P5 (psi)"]), row["Date"]))
      target[8].append((float(row["E1 (psi)"]), row["Date"]))
      target[9].append((float(row["E2 (psi)"]), row["Date"]))
      target[10].append((float(row["E4 (psi)"]), row["Date"]))
      line_count += 1
  print(f'Processed {line_count} lines.')
  for item in super_list:
    print(item)
col1, col2, col3, col4, col5, col6, col7, col8, col9, col10 = st.beta_columns(10)
with col1:
  st.header("HV")
with col2:
  st.header("UV")
with col3:
  st.header("B1")
with col4:
  st.header("B2")
with col5:
  st.header("B3")
with col6:
  st.header("B4")
with col7:
  st.header("P5")
with col8:
  st.header("E1")
with col9:
  st.header("E2")
with col10:
  st.header("E4")
#@title Graphing
xcounter = 0;
for instrument in super_list:
  counter = 0
  for val_list in instrument:
    if counter is not 0:
      xlist = []
      ylist = []
      sub_title = lookup(counter)
      graph_name = instrument[0] + ": " + sub_title
      for val in val_list:
        xcounter += 1;
        xlist.append(val[1])
        ylist.append(val[0])
      #print(xlist)
      #print(ylist)
      fig, ax = plt.subplots()
      ax.plot(xlist, ylist)
      plt.title(graph_name)
      if counter is 1:
        with col1:
          st.pyplot(fig)
      if counter is 2:
        with col2:
          st.pyplot(fig)
      if counter is 3:
        with col3:
          st.pyplot(fig)
      if counter is 4:
        with col4:
          st.pyplot(fig)
      if counter is 5:
        with col5:
          st.pyplot(fig)
      if counter is 6:
        with col6:
          st.pyplot(fig)
      if counter is 7:
        with col7:
          st.pyplot(fig)
      if counter is 8:
        with col8:
          st.pyplot(fig)
      if counter is 9:
        with col9:
          st.pyplot(fig)
      if counter is 10:
        with col10:
          st.pyplot(fig)
        counter = 0
    xcounter = 0
    counter += 1